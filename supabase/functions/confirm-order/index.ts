import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
import { corsHeaders } from '../_shared/cors.ts'

console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è confirm-order –∑–∞–ø—É—â–µ–Ω–∞')

Deno.serve(async (req) => {
  // CORS preflight
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const url = new URL(req.url)
    const orderId = url.searchParams.get('order_id')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ order_id
    if (!orderId) {
      return new Response(
        '‚ùå –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç order_id\n\n' +
        '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n' +
        '?order_id=–≤–∞—à-order-id\n\n' +
        '–ü—Ä–∏–º–µ—Ä:\n' +
        '?order_id=123e4567-e89b-12d3-a456-426614174000',
        {
          headers: { 
            ...corsHeaders, 
            'Content-Type': 'text/plain; charset=utf-8' 
          },
          status: 400,
        }
      )
    }

    console.log(`üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞: ${orderId}`)

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (orderId === 'TEST_ID') {
      return new Response(
        'üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú\n\n' +
        '‚úÖ –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n' +
        '–í–µ—Ä—Å–∏—è: 3.1.0\n' +
        '–°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ\n\n' +
        '–î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π UUID.',
        {
          headers: { 
            ...corsHeaders, 
            'Content-Type': 'text/plain; charset=utf-8' 
          }
        }
      )
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å admin –ø—Ä–∞–≤–∞–º–∏
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL')!,
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!,
    )

    // –í—ã–∑—ã–≤–∞–µ–º RPC —Ñ—É–Ω–∫—Ü–∏—é
    const { data: resultMessage, error } = await supabase.rpc('confirm_and_process_order', {
      p_order_id: orderId,
    })

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ë–î
    if (error) {
      console.error('‚ùå RPC –æ—à–∏–±–∫–∞:', error)
      
      return new Response(
        '‚ùå –û–®–ò–ë–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•\n\n' +
        `–ó–∞–∫–∞–∑: ${orderId}\n` +
        `–û—à–∏–±–∫–∞: ${error.message}\n` +
        `–ö–æ–¥: ${error.code || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n\n` +
        '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n' +
        '‚Ä¢ –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω\n' +
        '‚Ä¢ –ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n' +
        '‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –ë–î\n\n' +
        '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
        {
          headers: { 
            ...corsHeaders, 
            'Content-Type': 'text/plain; charset=utf-8' 
          },
          status: 400,
        }
      )
    }

    // –£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    console.log(`‚úÖ –ó–∞–∫–∞–∑ ${orderId} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω:`, resultMessage)

    return new Response(
      'üéâ –ó–ê–ö–ê–ó –£–°–ü–ï–®–ù–û –ü–û–î–¢–í–ï–†–ñ–î–ï–ù!\n\n' +
      `üìã ID –∑–∞–∫–∞–∑–∞: ${orderId}\n` +
      `üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: ${resultMessage || '–ó–∞–∫–∞–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ'}\n` +
      `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n` +
      `üîß –í–µ—Ä—Å–∏—è: 3.1.0\n\n` +
      '‚úÖ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.',
      {
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'text/plain; charset=utf-8' 
        }
      }
    )

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞'
    
    return new Response(
      'üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –°–ò–°–¢–ï–ú–´\n\n' +
      `–î–µ—Ç–∞–ª–∏: ${errorMessage}\n` +
      `–í—Ä–µ–º—è: ${new Date().toISOString()}\n` +
      `–í–µ—Ä—Å–∏—è: 3.1.0\n\n` +
      '–î–µ–π—Å—Ç–≤–∏—è:\n' +
      '1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É\n' +
      '2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å order_id\n' +
      '3. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ\n\n' +
      '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Ñ—É–Ω–∫—Ü–∏–∏.',
      {
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'text/plain; charset=utf-8' 
        },
        status: 500,
      }
    )
  }
})