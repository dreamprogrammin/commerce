import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
import { corsHeaders } from '../_shared/cors.ts'

Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }
  try {
    const url = new URL(req.url)
    const orderId = url.searchParams.get('order_id')
    if (!orderId) throw new Error('ID –∑–∞–∫–∞–∑–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.')

    const supabaseAdminClient = createClient(
      Deno.env.get('SUPABASE_URL')!,
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    )

    const { data: resultMessage, error } = await supabaseAdminClient.rpc('cancel_order', {
      p_order_id: orderId
    })
    if (error) throw error

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    const responseText = `
üóëÔ∏è –ó–ê–ö–ê–ó –û–¢–ú–ï–ù–ï–ù
=================
ID –ó–∞–∫–∞–∑–∞: ...${orderId.slice(-6)}
–†–µ–∑—É–ª—å—Ç–∞—Ç: ${resultMessage}

–≠—Ç–æ –æ–∫–Ω–æ –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å.
    `
    return new Response(responseText, {
      headers: { 
        ...corsHeaders, 
        'Content-Type': 'text/plain; charset=utf-8' 
      },
    })

  } catch (error) {
    let errorMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞."
    if (error instanceof Error) errorMessage = error.message

    const errorText = `
‚ùå –û–®–ò–ë–ö–ê –û–¢–ú–ï–ù–´ –ó–ê–ö–ê–ó–ê!
========================
–î–µ—Ç–∞–ª–∏: ${errorMessage}
    `
    return new Response(errorText, {
      headers: { 
        ...corsHeaders, 
        'Content-Type': 'text/plain; charset=utf-8' 
      },
      status: 400
    })
  }
})