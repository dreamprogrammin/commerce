import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è CORS
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

// "–ö–æ–Ω—Ç—Ä–∞–∫—Ç" –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞
interface OrderPayload {
  record: { id: string }
}

// --- –Ø–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—É—é –º—ã –æ–∂–∏–¥–∞–µ–º –æ—Ç Supabase ---
interface OrderItem {
  quantity: number
  product: { name: string | null } | null
}
interface OrderProfile {
  first_name: string | null
  last_name: string | null
  phone: string | null
}
interface OrderData {
  id: string
  final_amount: number
  created_at: string
  delivery_method: string
  payment_method: string | null
  delivery_address: { city: string, line1: string } | null // –£—Ç–æ—á–Ω–∏–ª–∏ —Ç–∏–ø –∞–¥—Ä–µ—Å–∞
  guest_name: string | null
  guest_phone: string | null
  profile: OrderProfile | null
  order_items: OrderItem[]
}
// -------------------------------------------------------------------------

console.log('–§—É–Ω–∫—Ü–∏—è notify-order-to-telegram –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.')

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const payload: OrderPayload = await req.json()
    const orderId = payload.record.id
    console.log(`–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${orderId}`)

    const supabaseAdminClient = createClient(
      Deno.env.get('SUPABASE_URL')!,
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!,
    )

    const { data, error: orderError } = await supabaseAdminClient
      .from('orders')
      .select(`
        id, final_amount, created_at, delivery_method, payment_method,
        delivery_address, guest_name, guest_phone,
        profile:profiles(first_name, last_name, phone),
        order_items(quantity, product:products(name))
      `)
      .eq('id', orderId)
      .single()

    if (orderError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞: ${orderError.message}`)
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º "–¥–≤–æ–π–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞" –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    const orderData = data as unknown as OrderData

    if (!orderData) {
      throw new Error(`–ó–∞–∫–∞–∑ —Å ID ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`)
    }
    console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –ë–î.')

    const customerName = orderData.profile?.first_name
      ? `${orderData.profile.first_name} ${orderData.profile.last_name || ''}`.trim()
      : orderData.guest_name
    const customerPhone = orderData.profile?.phone || orderData.guest_phone
    const orderDate = new Date(orderData.created_at).toLocaleString('ru-RU', { timeZone: 'Asia/Almaty' })

    let messageText = `üîî *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ...${orderData.id.slice(-6)}*\n\n`
    messageText += `*–î–∞—Ç–∞:* ${orderDate}\n`
    messageText += `*–ö–ª–∏–µ–Ω—Ç:* ${customerName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`
    messageText += `*–¢–µ–ª–µ—Ñ–æ–Ω:* \`${customerPhone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\`\n\n`

    messageText += `*–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n`
    orderData.order_items.forEach((item) => {
      const productName = item.product?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'
      messageText += `‚Ä¢ ${productName} (${item.quantity} —à—Ç.)\n`
    })

    // --- –î–û–ü–ò–°–ê–ù–ù–´–ô –ö–û–î –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø –ó–î–ï–°–¨ ---

    messageText += `\n*–°—É–º–º–∞:* ${orderData.final_amount} ‚Ç∏\n`
    messageText += `*–û–ø–ª–∞—Ç–∞:* ${orderData.payment_method || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`
    messageText += `*–î–æ—Å—Ç–∞–≤–∫–∞:* ${orderData.delivery_method === 'courier' ? '–ö—É—Ä—å–µ—Ä' : '–°–∞–º–æ–≤—ã–≤–æ–∑'}\n`

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å, –µ—Å–ª–∏ —ç—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º
    if (orderData.delivery_method === 'courier' && orderData.delivery_address) {
      messageText += `*–ê–¥—Ä–µ—Å:* ${orderData.delivery_address.city}, ${orderData.delivery_address.line1}\n`
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const botToken = Deno.env.get('TELEGRAM_BOT_TOKEN')
    const chatId = Deno.env.get('TELEGRAM_CHAT_ID')
    const supabaseUrl = Deno.env.get('SUPABASE_URL')

    if (!botToken || !chatId || !supabaseUrl) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Å–µ–∫—Ä–µ—Ç—ã) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.')
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL'—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
    const confirmUrl = `${supabaseUrl}/functions/v1/confirm-order?order_id=${orderId}`
    const cancelUrl = `${supabaseUrl}/functions/v1/cancel-order?order_id=${orderId}`

    const inlineKeyboard = {
      inline_keyboard: [
        [{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', url: confirmUrl }, { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', url: cancelUrl }],
      ],
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram API
    const response = await fetch(
      `https://api.telegram.org/bot${botToken}/sendMessage`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: messageText, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —Å–æ–±—Ä–∞–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
          parse_mode: 'Markdown',
          reply_markup: inlineKeyboard,
        }),
      },
    )

    if (!response.ok) {
      const errorBody = await response.json()
      throw new Error(`–û—à–∏–±–∫–∞ Telegram API: ${errorBody.description}`)
    }

    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.')

    return new Response(JSON.stringify({ success: true, message: `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.` }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    })
  }
  catch (error) {
    let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.'
    if (error instanceof Error) {
      errorMessage = error.message
    }
    else if (typeof error === 'string') {
      errorMessage = error
    }

    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ Edge Function:', errorMessage)

    return new Response(JSON.stringify({ error: errorMessage }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 400,
    })
  }
})
