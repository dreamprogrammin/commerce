import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

// "–ö–æ–Ω—Ç—Ä–∞–∫—Ç" (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
interface OrderPayload {
  record: { id: string }
}

console.log('–§—É–Ω–∫—Ü–∏—è notify-order-to-telegram –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.')

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const payload: OrderPayload = await req.json()
    const orderId = payload.record.id
    console.log(`–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${orderId}`)

    const supabaseAdminClient = createClient(
      Deno.env.get('SUPABASE_URL')!,
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!,
    )

    // ======================================================
    // ===           –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨           ===
    // ======================================================
    // –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å `–ø—Å–µ–≤–¥–æ–Ω–∏–º:–∏–º—è_—Ç–∞–±–ª–∏—Ü—ã(...)`, —á—Ç–æ–±—ã
    // —è–≤–Ω–æ —Å–∫–∞–∑–∞—Ç—å Supabase, —á—Ç–æ –º—ã –æ–∂–∏–¥–∞–µ–º –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ –º–∞—Å—Å–∏–≤.
    const { data: orderData, error: orderError } = await supabaseAdminClient
      .from('orders')
      .select(`
        id,
        final_amount,
        created_at,
        delivery_method,
        payment_method,
        delivery_address,
        guest_name,
        guest_phone,
        profile:profiles ( first_name, last_name, phone ),  
        order_items (
          quantity,
          product:products ( name ) 
        )
      `)
      .eq('id', orderId)
      .single()

    if (orderError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞: ${orderError.message}`)
    }
    console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –ë–î.')

    // ======================================================
    // ===      –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –õ–û–ì–ò–ö–ò –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò        ===
    // ======================================================
    // –¢–µ–ø–µ—Ä—å `orderData.profile` - —ç—Ç–æ –û–î–ò–ù –æ–±—ä–µ–∫—Ç (–∏–ª–∏ null), –∞ –Ω–µ –º–∞—Å—Å–∏–≤.
    const customerName = orderData.profile?.first_name
      ? `${orderData.profile.first_name} ${orderData.profile.last_name || ''}`.trim()
      : orderData.guest_name
    const customerPhone = orderData.profile?.phone || orderData.guest_phone
    const orderDate = new Date(orderData.created_at).toLocaleString('ru-RU', { timeZone: 'Asia/Almaty' })

    let messageText = `üîî *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ...${orderData.id.slice(-6)}*\n\n`
    messageText += `*–î–∞—Ç–∞:* ${orderDate}\n`
    messageText += `*–ö–ª–∏–µ–Ω—Ç:* ${customerName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`
    messageText += `*–¢–µ–ª–µ—Ñ–æ–Ω:* \`${customerPhone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\`\n\n`

    messageText += `*–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n`
    orderData.order_items.forEach((item) => {
      // `item.product` —Ç–µ–ø–µ—Ä—å —Ç–æ–∂–µ –û–î–ò–ù –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ –º–∞—Å—Å–∏–≤.
      const productName = item.product?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'
      messageText += `‚Ä¢ ${productName} (${item.quantity} —à—Ç.)\n`
    })

    // --- –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
    messageText += `\n*–°—É–º–º–∞:* ${orderData.final_amount} ‚Ç∏\n`
    messageText += `*–û–ø–ª–∞—Ç–∞:* ${orderData.payment_method}\n`
    // ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–æ –∫–æ–Ω—Ü–∞ —Ñ—É–Ω–∫—Ü–∏–∏ ...

    // ... (—Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram)

    return new Response(JSON.stringify({ success: true, message: `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.` }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    })
  }
  catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ Edge Function:', error.message)
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 400,
    })
  }
})
