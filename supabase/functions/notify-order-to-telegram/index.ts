// –§–∞–π–ª: supabase/functions/notify-order-to-telegram/index.ts
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

interface OrderPayload {
  record: { id: string; }
}

console.log("–§—É–Ω–∫—Ü–∏—è notify-order-to-telegram –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const payload: OrderPayload = await req.json()
    const orderId = payload.record.id
    console.log(`–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${orderId}`)

    const supabaseAdminClient = createClient(
      Deno.env.get('SUPABASE_URL')!,
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    )

    const { data: orderData, error: orderError } = await supabaseAdminClient
      .from('orders')
      .select(`
        id, final_amount, created_at, delivery_method, payment_method,
        delivery_address, guest_name, guest_phone,
        profiles ( first_name, last_name, phone ),
        order_items ( quantity, products ( name ) )
      `)
      .eq('id', orderId)
      .single()

    if (orderError) throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${orderError.message}`)
    console.log("–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –ë–î.")

    const customerName = orderData.profiles?.first_name ? `${orderData.profiles.first_name} ${orderData.profiles.last_name || ''}`.trim() : orderData.guest_name
    const customerPhone = orderData.profiles?.phone || orderData.guest_phone
    const orderDate = new Date(orderData.created_at).toLocaleString('ru-RU', { timeZone: 'Asia/Almaty' }) // –£–∫–∞–∑–∞–ª —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞
    
    let messageText = `üîî *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ...${orderData.id.slice(-6)}*\n\n`
    messageText += `*–î–∞—Ç–∞:* ${orderDate}\n`
    messageText += `*–ö–ª–∏–µ–Ω—Ç:* ${customerName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`
    messageText += `*–¢–µ–ª–µ—Ñ–æ–Ω:* \`${customerPhone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\`\n\n`
    
    messageText += `*–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n`
    orderData.order_items.forEach(item => {
      messageText += `‚Ä¢ ${item.products.name} (${item.quantity} —à—Ç.)\n`
    })
    
    messageText += `\n*–°—É–º–º–∞:* ${orderData.final_amount} ‚Ç∏\n`
    messageText += `*–û–ø–ª–∞—Ç–∞:* ${orderData.payment_method}\n`
    messageText += `*–î–æ—Å—Ç–∞–≤–∫–∞:* ${orderData.delivery_method === 'courier' ? '–ö—É—Ä—å–µ—Ä' : '–°–∞–º–æ–≤—ã–≤–æ–∑'}\n`

    if (orderData.delivery_method === 'courier' && orderData.delivery_address) {
      const address = orderData.delivery_address as { line1: string, city: string }
      messageText += `*–ê–¥—Ä–µ—Å:* ${address.city}, ${address.line1}\n`
    }
    messageText += `\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.`
    
    const botToken = Deno.env.get('TELEGRAM_BOT_TOKEN')
    const chatId = Deno.env.get('TELEGRAM_CHAT_ID')
    if (!botToken || !chatId) throw new Error('–°–µ–∫—Ä–µ—Ç—ã TELEGRAM –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.')

    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id: chatId, text: messageText, parse_mode: 'Markdown' }),
    })
    
    if (!response.ok) {
       const errorBody = await response.json()
       throw new Error(`–û—à–∏–±–∫–∞ Telegram API: ${errorBody.description}`)
    }
    console.log("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")

    return new Response(JSON.stringify({ success: true }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    })

  } catch (error) {
    console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ Edge Function:", error.message)
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 400,
    })
  }
})