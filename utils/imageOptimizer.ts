/**
 * üñºÔ∏è –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ü–ï–†–ï–î –∑–∞–≥—Ä—É–∑–∫–æ–π –≤ Supabase
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ IMAGE_OPTIMIZATION_ENABLED = false (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ)
 */

export interface ImageOptimizationOptions {
  maxWidth?: number
  maxHeight?: number
  quality?: number // 0.0 - 1.0
  format?: 'webp' | 'jpeg' | 'png'
}

export interface OptimizationResult {
  file: File
  originalSize: number
  optimizedSize: number
  savings: number // –ø—Ä–æ—Ü–µ–Ω—Ç —ç–∫–æ–Ω–æ–º–∏–∏
}

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
 */
export async function optimizeImageBeforeUpload(
  file: File,
  options: ImageOptimizationOptions = {},
): Promise<OptimizationResult> {
  const {
    maxWidth = 800,
    maxHeight = 800,
    quality = 0.85,
    format = 'webp',
  } = options

  return new Promise((resolve, reject) => {
    const reader = new FileReader()
    const originalSize = file.size

    reader.onload = (e) => {
      const img = new Image()

      img.onload = () => {
        const canvas = document.createElement('canvas')
        const ctx = canvas.getContext('2d')

        if (!ctx) {
          reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å canvas context'))
          return
        }

        let { width, height } = img

        // –†–∞—Å—á–µ—Ç –Ω–æ–≤—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        if (width > height) {
          if (width > maxWidth) {
            height = (height * maxWidth) / width
            width = maxWidth
          }
        }
        else {
          if (height > maxHeight) {
            width = (width * maxHeight) / height
            height = maxHeight
          }
        }

        canvas.width = width
        canvas.height = height

        // –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        ctx.imageSmoothingEnabled = true
        ctx.imageSmoothingQuality = 'high'

        // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        ctx.drawImage(img, 0, 0, width, height)

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME type
        const mimeType = format === 'webp' ? 'image/webp' : `image/${format}`

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ blob
        canvas.toBlob(
          (blob) => {
            if (!blob) {
              reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'))
              return
            }

            const optimizedSize = blob.size
            const savings = ((1 - optimizedSize / originalSize) * 100)

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
            const extension = format === 'webp' ? '.webp' : `.${format}`
            const newFileName = file.name.replace(/\.[^.]+$/, extension)

            const optimizedFile = new File(
              [blob],
              newFileName,
              {
                type: mimeType,
                lastModified: Date.now(),
              },
            )

            resolve({
              file: optimizedFile,
              originalSize,
              optimizedSize,
              savings,
            })
          },
          mimeType,
          quality,
        )
      }

      img.onerror = () => reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'))
      img.src = e.target?.result as string
    }

    reader.onerror = () => reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª'))
    reader.readAsDataURL(file)
  })
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export function formatFileSize(bytes: number): string {
  if (bytes === 0)
    return '0 Bytes'

  const k = 1024
  const sizes = ['Bytes', 'KB', 'MB', 'GB']
  const i = Math.floor(Math.log(bytes) / Math.log(k))

  return `${Math.round((bytes / k ** i) * 100) / 100} ${sizes[i]}`
}

/**
 * –ü–∞–∫–µ—Ç–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
export async function optimizeMultipleImages(
  files: File[],
  options: ImageOptimizationOptions = {},
): Promise<OptimizationResult[]> {
  const results: OptimizationResult[] = []

  for (const file of files) {
    try {
      const result = await optimizeImageBeforeUpload(file, options)
      results.push(result)
    }
    catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ${file.name}:`, error)
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
      results.push({
        file,
        originalSize: file.size,
        optimizedSize: file.size,
        savings: 0,
      })
    }
  }

  return results
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 */
export function shouldOptimizeImage(file: File, maxSize: number = 500 * 1024): boolean {
  // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏:
  // 1. –§–∞–π–ª –±–æ–ª—å—à–µ maxSize (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 500KB)
  // 2. –≠—Ç–æ –Ω–µ WebP —Ñ–æ—Ä–º–∞—Ç
  return file.size > maxSize || !file.type.includes('webp')
}
