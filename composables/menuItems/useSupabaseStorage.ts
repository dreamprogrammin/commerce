import type { Database, IUploadFileOptions } from '@/types'
import { v4 as uuidv4 } from 'uuid'
import { toast } from 'vue-sonner'
import { IMAGE_OPTIMIZATION_ENABLED } from '@/config/images'

/**
 * –û–ø—Ü–∏–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Supabase
 */
export interface ImageTransformOptions {
  width?: number
  height?: number
  quality?: number
  format?: 'webp' | 'avif' | 'jpeg' | 'png'
  resize?: 'cover' | 'contain' | 'fill'
}

/**
 * üñºÔ∏è Composable –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase Storage
 *
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
 * - ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * - ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
 * - ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö URLs
 * - ‚úÖ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Supabase API
 * - ‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ URLs –≤ –ø–∞–º—è—Ç–∏
 * - ‚úÖ –û–±—Ö–æ–¥ Cloudflare bot detection
 * - ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–µ–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–ª–æ–∫–∞–ª—å–Ω–∞—è –∏ –æ–±–ª–∞—á–Ω–∞—è)
 */
export function useSupabaseStorage() {
  const supabase = useSupabaseClient<Database>()
  const config = useRuntimeConfig()

  // --- –°–û–°–¢–û–Ø–ù–ò–ï ---
  const isLoading = ref(false)
  const uploadError = ref<string | null>(null)

  // üóÑÔ∏è –ö–µ—à –¥–ª—è URLs (–∏–∑–±–µ–≥–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
  const imageUrlCache = new Map<string, string>()

  /**
   * üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ Supabase Storage
   *
   * @param file - —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
   * @param options - –æ–ø—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ (bucketName, filePathPrefix, etc)
   * @returns –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ storage –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
   *
   * @example
   * const path = await uploadFile(file, {
   *   bucketName: 'products',
   *   filePathPrefix: 'products/123'
   * })
   */
  async function uploadFile(
    file: File,
    options: IUploadFileOptions,
  ): Promise<string | null> {
    isLoading.value = true
    uploadError.value = null

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    if (!file) {
      const noFileError = '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω'
      uploadError.value = noFileError
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏', {
        description: noFileError,
      })
      isLoading.value = false
      return null
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const fileExt = file.name.split('.').pop()
    const uniqueFileName = `${uuidv4()}${fileExt ? `.${fileExt}` : ''}`
    const filePath = options.filePathPrefix
      ? `${options.filePathPrefix.replace(/\/$/, '')}/${uniqueFileName}`
      : uniqueFileName

    try {
      console.log(`üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: ${uniqueFileName} ‚Üí ${options.bucketName}/${filePath}`)

      const { data, error } = await supabase.storage
        .from(options.bucketName)
        .upload(filePath, file, {
          cacheControl: options.cashControl || '3600',
          upsert: options.upsert === undefined ? true : options.upsert,
          contentType: options.contentType,
        })

      if (error)
        throw error

      console.log(`‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: ${data.path}`)
      toast.success('–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω', {
        description: `${file.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω`,
      })

      return data.path
    }
    catch (e: any) {
      const message = e.message || `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ –±–∞–∫–µ—Ç ${options.bucketName}.`
      uploadError.value = message
      toast.error('–û—à–∏–±–∫–∞ Storage', {
        description: message,
      })
      console.error(
        `‚ùå Error uploading to bucket "${options.bucketName}", path "${filePath}":`,
        e,
      )
      return null
    }
    finally {
      isLoading.value = false
    }
  }

  /**
   * üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª(—ã) –∏–∑ Supabase Storage
   *
   * @param bucketName - –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞
   * @param filePaths - –ø—É—Ç—å(–∏) –∫ —Ñ–∞–π–ª—É(–∞–º) (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –º–∞—Å—Å–∏–≤)
   * @returns true –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, false –ø—Ä–∏ –æ—à–∏–±–∫–µ
   *
   * @example
   * await removeFile('products', 'path/to/file.jpg')
   * await removeFile('products', ['path/1.jpg', 'path/2.jpg'])
   */
  async function removeFile(
    bucketName: string,
    filePaths: string | string[],
  ): Promise<boolean> {
    const pathsToRemove = Array.isArray(filePaths) ? filePaths : [filePaths]
    const validPathsToRemove = pathsToRemove.filter(
      p => p && p.trim() !== '',
    )

    if (validPathsToRemove.length === 0)
      return true

    try {
      console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ ${bucketName}: ${validPathsToRemove.join(', ')}`)

      const { error } = await supabase.storage
        .from(bucketName)
        .remove(validPathsToRemove)

      if (error)
        throw error

      toast.success('–§–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã', {
        description: `${validPathsToRemove.length} —Ñ–∞–π–ª(–æ–≤) —É–¥–∞–ª–µ–Ω–æ –∏–∑ ${bucketName}`,
      })

      // –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      validPathsToRemove.forEach((path) => {
        const cacheKeysToDelete: string[] = []
        imageUrlCache.forEach((_, key) => {
          if (key.includes(path)) {
            cacheKeysToDelete.push(key)
          }
        })
        cacheKeysToDelete.forEach(key => imageUrlCache.delete(key))
      })

      console.log(`‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã`)
      return true
    }
    catch (e: any) {
      const message = e.message || `–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞(–æ–≤) –∏–∑ –±–∞–∫–µ—Ç–∞ ${bucketName}.`
      toast.error('–û—à–∏–±–∫–∞ Storage', {
        description: message,
      })
      console.error(
        `‚ùå Error removing files from bucket "${bucketName}", paths "${validPathsToRemove.join(', ')}":`,
        e,
      )
      return false
    }
  }

  /**
   * üåç –ü–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL –±–µ–∑ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
   *
   * @param bucketName - –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞
   * @param filePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
   * @returns –ø—É–±–ª–∏—á–Ω—ã–π URL –∏–ª–∏ null
   *
   * @example
   * const url = getPublicUrl('products', 'products/123/image.jpg')
   * // https://project.supabase.co/storage/v1/object/public/products/products/123/image.jpg
   */
  function getPublicUrl(
    bucketName: string,
    filePath: string | null,
  ): string | null {
    if (!filePath || !filePath.trim()) {
      return null
    }

    try {
      const { data } = supabase.storage.from(bucketName).getPublicUrl(filePath)
      const url = data?.publicUrl || null

      if (url) {
        console.log(`üåç Public URL (${bucketName}): ${url}`)
      }

      return url
    }
    catch (e) {
      console.error(
        `‚ùå Error getting public URL for "${filePath}" in bucket "${bucketName}":`,
        e,
      )
      return null
    }
  }

  /**
   * üöÄ –ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL —Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Supabase Image Transformation API –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞ –ª–µ—Ç—É
   *
   * @param bucketName - –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞
   * @param filePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
   * @param options - –æ–ø—Ü–∏–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ (width, height, quality, format, resize)
   * @returns –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL –∏–ª–∏ null
   *
   * @example
   * const url = getOptimizedUrl('products', 'products/123/image.jpg', {
   *   width: 400,
   *   height: 400,
   *   quality: 80,
   *   format: 'webp',
   *   resize: 'cover'
   * })
   */
  function getOptimizedUrl(
    bucketName: string,
    filePath: string | null,
    options: ImageTransformOptions = {},
  ): string | null {
    if (!filePath || !filePath.trim()) {
      return null
    }

    try {
      const {
        width,
        height,
        quality = 80,
        format = 'webp',
        resize = 'cover',
      } = options

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
      const params: string[] = []

      if (width)
        params.push(`width=${width}`)
      if (height)
        params.push(`height=${height}`)
      if (quality)
        params.push(`quality=${quality}`)
      if (format)
        params.push(`format=${format}`)
      if (resize)
        params.push(`resize=${resize}`)

      const queryString = params.length > 0 ? `?${params.join('&')}` : ''

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Supabase Image Transformation API —á–µ—Ä–µ–∑ render endpoint
      const baseUrl = `${config.public.supabase.url}/storage/v1/render/image/public/${bucketName}`
      const url = `${baseUrl}/${filePath}${queryString}`

      console.log(`üöÄ Optimized URL (${format} ${width}x${height}): ${url}`)

      return url
    }
    catch (e) {
      console.error(
        `‚ùå Error getting optimized URL for "${filePath}" in bucket "${bucketName}":`,
        e,
      )
      // Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π URL
      return getPublicUrl(bucketName, filePath)
    }
  }

  /**
   * üõ°Ô∏è –ü–æ–ª—É—á–∏—Ç—å URL —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ Cloudflare bot detection
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
   *
   * @param bucketName - –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞
   * @param filePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
   * @param options - –æ–ø—Ü–∏–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
   * @returns –æ–±—ä–µ–∫—Ç —Å URL –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
   *
   * @example
   * const { url, headers } = getImageUrlWithHeaders('products', 'image.jpg', { width: 400 })
   * fetch(url, { headers })
   */
  function getImageUrlWithHeaders(
    bucketName: string,
    filePath: string | null,
    options?: ImageTransformOptions,
  ): { url: string | null, headers?: Record<string, string> } {
    if (!filePath || !filePath.trim()) {
      return { url: null }
    }

    const url = getImageUrl(bucketName, filePath, options)

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ Cloudflare bot detection
    const headers = {
      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
      'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8',
      'Accept-Language': 'en-US,en;q=0.9',
      'Accept-Encoding': 'gzip, deflate, br',
      'Cache-Control': 'no-cache',
      'Pragma': 'no-cache',
      'DNT': '1',
      'Connection': 'keep-alive',
      'Upgrade-Insecure-Requests': '1',
    }

    return { url, headers }
  }

  /**
   * üéØ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–ª–∏ –æ–±—ã—á–Ω—ã–π URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥–∞
   *
   * ‚úÖ –ö–µ—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   * ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: –ª–æ–∫–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ –æ–±–ª–∞—á–Ω–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
   * ‚úÖ üõ°Ô∏è –î–æ–±–∞–≤–ª—è–µ—Ç timestamp –û–î–ò–ù –†–ê–ó –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ (–Ω–µ –Ω–∞ –∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤)
   *
   * @param bucketName - –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞
   * @param filePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
   * @param options - –æ–ø—Ü–∏–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è –µ—Å–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞)
   * @returns URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
   *
   * @example
   * // –° –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –≤ config/images.ts)
   * const url = getImageUrl('products', 'products/123/image.jpg', { width: 400, quality: 80 })
   *
   * // –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–≤–µ—Ä–Ω–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª –µ—Å–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞)
   * const url = getImageUrl('products', 'products/123/image.jpg')
   */
  function getImageUrl(
    bucketName: string,
    filePath: string | null,
    options?: ImageTransformOptions,
  ): string | null {
    if (!filePath || !filePath.trim()) {
      return null
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∫–µ—à–∞
    const cacheKey = `${bucketName}:${filePath}:${JSON.stringify(options || {})}`

    // üíæ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à - –í–û–ó–í–†–ê–©–ê–ï–ú –û–î–ò–ù–ê–ö–û–í–´–ô URL –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if (imageUrlCache.has(cacheKey)) {
      const cachedUrl = imageUrlCache.get(cacheKey)
      if (cachedUrl) {
        console.log(`üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL: ${cacheKey}`)
        // ‚úÖ –í–ê–ñ–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –û–î–ò–ù–ê–ö–û–í–´–ô –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL, –±–µ–∑ –Ω–æ–≤–æ–≥–æ timestamp
        // –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—Ä–∞—É–∑–µ—Ä—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–µ—à –∏ –Ω–µ –ø–µ—Ä–µz–∞–≥—Ä—É–∂–∞—Ç—å
        return cachedUrl
      }
    }

    let url: string | null = null

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    if (IMAGE_OPTIMIZATION_ENABLED && options) {
      // üöÄ –†–ï–ñ–ò–ú 1: –ü–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ - –∏—Å–ø–æ–ª—å–∑—É–µ–º Supabase —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
      url = getOptimizedUrl(bucketName, filePath, options)
      console.log(`üöÄ –†–µ–∂–∏–º: Supabase Transform (–ø–ª–∞—Ç–Ω—ã–π)`)
    }
    else {
      // üíæ –†–ï–ñ–ò–ú 2: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª (—É–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ)
      url = getPublicUrl(bucketName, filePath)
      console.log(`üíæ –†–µ–∂–∏–º: Pre-optimized (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)`)
    }

    // üõ°Ô∏è –î–æ–±–∞–≤–ª—è–µ–º timestamp –û–î–ò–ù –†–ê–ó –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    // –≠—Ç–æ –æ–±—Ö–æ–¥–∏—Ç Cloudflare bot detection, –Ω–æ –±—Ä–∞—É–∑–µ—Ä –º–æ–∂–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (url) {
      const separator = url.includes('?') ? '&' : '?'
      const urlWithTimestamp = `${url}${separator}t=${Date.now()}`

      // –ö–µ—à–∏—Ä—É–µ–º URL —Å timestamp
      imageUrlCache.set(cacheKey, urlWithTimestamp)

      console.log(`üÜï –ù–æ–≤—ã–π URL —Å timestamp: ${cacheKey}`)
      return urlWithTimestamp
    }

    return null
  }

  /**
   * üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–µ—à URLs
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å URLs –≤—Ä—É—á–Ω—É—é
   *
   * @example
   * clearImageCache()  // –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  function clearImageCache(): void {
    const sizeBefore = imageUrlCache.size
    imageUrlCache.clear()
    console.log(`üßπ –ö–µ—à –æ—á–∏—â–µ–Ω (–±—ã–ª–æ ${sizeBefore} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)`)
  }

  /**
   * üìä –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ—à–µ
   * –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   *
   * @returns –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–µ—à–µ
   *
   * @example
   * console.log(getCacheInfo())
   * // { size: 42, entries: [...] }
   */
  function getCacheInfo(): { size: number, entries: Array<{ key: string, value: string }> } {
    const entries: Array<{ key: string, value: string }> = []
    imageUrlCache.forEach((value, key) => {
      entries.push({ key, value })
    })
    return { size: imageUrlCache.size, entries }
  }

  // --- –≠–ö–°–ü–û–†–¢ ---
  return {
    // State
    isLoading,
    uploadError,

    // Methods
    uploadFile,
    removeFile,
    getPublicUrl,
    getOptimizedUrl,
    getImageUrl, // üéØ –û–°–ù–û–í–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è - –∏—Å–ø–æ–ª—å–∑—É–π –≤–µ–∑–¥–µ
    getImageUrlWithHeaders,
    clearImageCache,
    getCacheInfo,
  }
}
