import type { Ref } from 'vue'

/**
 * –û–ø—Ü–∏–∏ –¥–ª—è Intersection Observer
 */
export interface ProgressiveImageOptions {
  rootMargin?: string // –û—Ç—Å—Ç—É–ø –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '50px')
  threshold?: number // –ü–æ—Ä–æ–≥ –≤–∏–¥–∏–º–æ—Å—Ç–∏ (0.01 = 1%)
}

/**
 * üñºÔ∏è –ö–æ–º–ø–æ–∑–µ–±–ª –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 *
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - Lazy loading —á–µ—Ä–µ–∑ Intersection Observer
 * - Shimmer –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π retry –ø—Ä–∏ —Å–±–æ–µ
 * - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–µ—à–∞ –±—Ä–∞—É–∑–µ—Ä–∞
 *
 * @param imageUrl - —Ä–µ–∞–∫—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param options - –æ–ø—Ü–∏–∏ (rootMargin, threshold)
 * @returns –æ–±—ä–µ–∫—Ç —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –º–µ—Ç–æ–¥–∞–º–∏
 *
 * @example
 * const imageUrl = toRef(props, 'src')
 * const { imageRef, isLoaded, isError, shouldLoad, onLoad, onError } = useProgressiveImage(imageUrl)
 */
export function useProgressiveImage(
  imageUrl: Ref<string | null | undefined>,
  options: ProgressiveImageOptions = {},
) {
  const {
    rootMargin = '50px',
    threshold = 0.01,
  } = options

  // --- –°–û–°–¢–û–Ø–ù–ò–ï ---
  const imageRef = ref<HTMLImageElement>()
  const isVisible = ref(false) // –í–∏–¥–∏–º–æ –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ viewport
  const isLoaded = ref(false) // –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const isError = ref(false) // –ü—Ä–æ–∏–∑–æ—à–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  const shouldLoad = ref(false) // –ù—É–∂–Ω–æ –ª–∏ –Ω–∞—á–∏–Ω–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
  const retryCount = ref(0) // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ retry
  const maxRetries = 3 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫

  let observer: IntersectionObserver | null = null

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  function onLoad() {
    isLoaded.value = true
    isError.value = false
    retryCount.value = 0
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  function onError() {
    isError.value = true

    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
    if (retryCount.value < maxRetries) {
      retryCount.value++
      console.warn(
        `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount.value}/${maxRetries}):`,
        imageUrl.value,
      )

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ retry
      setTimeout(() => {
        if (imageRef.value) {
          // –¢—Ä–∏–≥–≥–µ—Ä–∏–º –ø–µ—Ä–µz–∞–≥—Ä—É–∑–∫—É –¥–æ–±–∞–≤–∏–≤ timestamp
          const separator = imageUrl.value?.includes('?') ? '&' : '?'
          imageRef.value.src = `${imageUrl.value}${separator}retry=${retryCount.value}`
        }
      }, 500 * retryCount.value) // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    }
    else {
      console.error('üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫:', imageUrl.value)
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Intersection Observer
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–≥–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ viewport + rootMargin
   */
  function initializeObserver() {
    if (!imageRef.value)
      return

    observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            // –≠–ª–µ–º–µ–Ω—Ç —Å—Ç–∞–ª –≤–∏–¥–∏–º—ã–º
            isVisible.value = true
            shouldLoad.value = true

            // –û—Ç–∫–ª—é—á–∞–µ–º observer –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
            if (observer) {
              observer.disconnect()
              observer = null
            }

            console.warn('üëÅÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É:', imageUrl.value)
          }
        })
      },
      {
        rootMargin,
        threshold,
      },
    )

    observer.observe(imageRef.value)
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞: –æ—Ç–∫–ª—é—á–∞–µ–º observer –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
   */
  function cleanup() {
    if (observer) {
      observer.disconnect()
      observer = null
    }

    if (imageRef.value) {
      imageRef.value = undefined
    }
  }

  /**
   * –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ URL –º–µ–Ω—è–µ—Ç—Å—è
   */
  function resetState() {
    isLoaded.value = false
    isError.value = false
    retryCount.value = 0
    shouldLoad.value = false
  }

  // --- –ñ–ò–ó–ù–ï–ù–ù–´–ô –¶–ò–ö–õ ---

  /**
   * –ü—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º observer
   */
  onMounted(() => {
    nextTick(() => {
      initializeObserver()
    })
  })

  /**
   * –ü—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: –æ—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
   */
  onBeforeUnmount(() => {
    cleanup()
  })

  /**
   * –ö–æ–≥–¥–∞ URL –º–µ–Ω—è–µ—Ç—Å—è: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º observer
   */
  watch(
    imageUrl,
    (newUrl, oldUrl) => {
      // –ï—Å–ª–∏ URL –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è - –≤—ã—Ö–æ–¥–∏–º
      if (newUrl === oldUrl)
        return

      console.warn('üîÑ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª—Å—è:', { oldUrl, newUrl })

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      resetState()

      // –ï—Å–ª–∏ —É–∂–µ –±—ã–ª observer - –æ—á–∏—â–∞–µ–º –µ–≥–æ
      if (observer) {
        observer.disconnect()
        observer = null
      }

      // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º observer –¥–ª—è –Ω–æ–≤–æ–≥–æ URL
      nextTick(() => {
        if (imageRef.value) {
          initializeObserver()
        }
      })
    },
  )

  /**
   * –ï—Å–ª–∏ URL –º–µ–Ω—è–µ—Ç—Å—è –Ω–æ shouldLoad —É–∂–µ true (–Ω–∞–ø—Ä–∏–º–µ—Ä –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏),
   * –Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
   */
  watch(
    [imageUrl, shouldLoad],
    ([newUrl, shouldLoadValue]) => {
      if (shouldLoadValue && newUrl) {
        // –û–±–Ω–æ–≤–ª—è–µ–º src —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å
        if (imageRef.value && imageRef.value.src !== newUrl) {
          imageRef.value.src = newUrl
        }
      }
    },
  )

  // --- –≠–ö–°–ü–û–†–¢ ---
  return {
    // Refs
    imageRef,
    isVisible,
    isLoaded,
    isError,
    shouldLoad,
    retryCount,

    // Methods
    onLoad,
    onError,
    resetState,
    cleanup,
  }
}
