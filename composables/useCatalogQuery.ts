import type { IProductFilters, ProductWithGallery } from '@/types'
import { useQuery } from '@tanstack/vue-query'
import { useProductsStore } from '@/stores/publicStore/productsStore'

export function useCatalogQuery(
  filters: Ref<IProductFilters>,
  currentPage: Ref<number>,
  pageSize: number = 12,
) {
  const productStore = useProductsStore()

  // üî• –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫—ç—à–∞
  const queryKey = computed(() => {
    const f = unref(filters)
    return [
      'catalog-products',
      f.categorySlug,
      f.sortBy,
      unref(currentPage),
      pageSize,
      // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
      f.subCategoryIds?.join(',') || 'no-sub',
      f.brandIds?.join(',') || 'no-brands',
      f.materialIds?.join(',') || 'no-materials',
      f.countryIds?.join(',') || 'no-countries',
      `${f.priceMin}-${f.priceMax}`,
      JSON.stringify(f.attributes || {}),
    ]
  })

  // üî• –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  const queryFn = async () => {
    const result = await productStore.fetchProducts(
      unref(filters),
      unref(currentPage),
      pageSize,
    )

    return result
  }

  // üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Vue Query
  const query = useQuery({
    queryKey,
    queryFn,
    staleTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç - –¥–∞–Ω–Ω—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–≤–µ–∂–∏–º–∏
    gcTime: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç - –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ –∫—ç—à–µ (–±—ã–ª–æ cacheTime)
    placeholderData: previousData => previousData, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∫–∞ –≥—Ä—É–∑—è—Ç—Å—è –Ω–æ–≤—ã–µ
    retry: 1, // –û–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
  })

  // üî• –£–¥–æ–±–Ω—ã–µ computed —Å–≤–æ–π—Å—Ç–≤–∞
  const products = computed<ProductWithGallery[]>(() =>
    query.data.value?.products || [],
  )

  const hasMore = computed(() =>
    query.data.value?.hasMore || false,
  )

  return {
    // –î–∞–Ω–Ω—ã–µ
    products,
    hasMore,

    // –°–æ—Å—Ç–æ—è–Ω–∏—è
    isLoading: query.isLoading, // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±—ã–ª–æ isFetched
    isFetching: query.isFetching, // –ó–∞–≥—Ä—É–∑–∫–∞ –≤ —Ñ–æ–Ω–µ
    isError: query.isError,
    error: query.error,

    // –ú–µ—Ç–æ–¥—ã
    refetch: query.refetch,
  }
}
